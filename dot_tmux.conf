# ═══════════════════════════════════════════════════════════════════════════════
# TMUX CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Global Options
# ───────────────────────────────────────────────────────────────────────────────
unbind-key C-b
set-option -g prefix C-a  # Change bind key to Ctrl-a (shorter reach)

# Terminal Setup
set -g default-terminal "tmux-256color"  # Better truecolor support (test; fallback to xterm-256color if issues)
set-option -g xterm-keys on              # Add support for Ctrl+Backspace
bind-key -n C-H send-keys C-w            # Send Ctrl+H as Ctrl+W (word delete)
set-option -g status-keys vi             # Vi-style status keys

# Mouse and Bells
set-option -g mouse on                   # Mouse support
set -g set-titles on                     # Allow tmux to set terminal title
setw -g monitor-activity on              # Monitor window activity in status bar
set -g bell-action any                   # Bell in any window rings current
set -g visual-bell off                   # No distracting visual bells
set -g visual-activity off               # No visual activity notifications

# Indexing and Renumbering
set-option -g base-index 1               # Start windows/panes from 1
set-option -g pane-base-index 1
set-option -g renumber-windows on        # Renumber windows on close
set -g focus-events on                   # Focus events for terminals

# Clipboard (let yank plugin handle it)
set-option -s set-clipboard off

# Mode Keys
set-window-option -g mode-keys vi        # Vi mode for copy/scroll

# ═══════════════════════════════════════════════════════════════════════════════
# STATUS BAR
# ───────────────────────────────────────────────────────────────────────────────
set -g status-interval 5                 # Update every 5s
set -g status-justify left
set -g status-style bg=default
set -g status-left-length 200
set -g status-right-length 120

set -g status-left "#[fg=colour19]#[fg=colour15,bg=colour18] #S #[fg=colour18,bg=default]#[fg=colour15,bg=default] "
set -g window-status-current-format "#[fg=colour34]#[fg=colour15,bg=colour33] #I:#W#{?window_zoomed_flag,[Z],} #[fg=colour33,bg=default]"
set -g window-status-format "#[fg=colour245]#[fg=colour15,bg=colour244] #I:#W#{?window_zoomed_flag,[Z],} #[fg=colour244,bg=default]"
set -g status-right "#[fg=colour19]#[fg=colour15,bg=colour18] #(whoami)@#h #[fg=colour18,bg=default] #[fg=colour18]#[fg=colour15,bg=colour18] %H:%M %a %d/%m/%y #[fg=colour18,bg=default] #{?client_prefix,PREFIX,}#{online_status}#{?pane_synchronized,#[fg=colour9]#[bg=default]#[bg=colour9]#[fg=colour15] S #[fg=colour9]#[bg=default] ,}"

# ═══════════════════════════════════════════════════════════════════════════════
# KEYBINDINGS
# ───────────────────────────────────────────────────────────────────────────────
# General/Prefix Helpers
# ───────────────────────────────────────────────────────────────────────────────
bind C-a send-prefix                     # Send Ctrl-a to programs under tmux
bind r source-file ~/.tmux.conf \; display-message '~/.tmux.conf reloaded'  # Reload config
bind K kill-server                       # Kill entire tmux server
bind -r B switch-client -l                  # Switch to last client/session
bind -r b last-window                       # Go to last window
bind-key z resize-pane -Z                # Zoom current pane (mnemonic)

# Prevent Ctrl+z mistake in nvim
bind C-z resize-pane -Z                  # Keep as fallback if needed

# Toggle status bar
bind-key -T prefix n set-option -g status

# ═══════════════════════════════════════════════════════════════════════════════
# NAVIGATION KEYBINDINGS
# ───────────────────────────────────────────────────────────────────────────────
# Smart pane switching (Vim-aware: sends to Vim if active, else switches pane)
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# Window navigation (prefix + h/l for prev/next)
bind-key -r h previous-window
bind-key -r l next-window

# ═══════════════════════════════════════════════════════════════════════════════
# PANE MANAGEMENT KEYBINDINGS
# ───────────────────────────────────────────────────────────────────────────────
# Splits (Vim-style: v=vertical split (horizontal pane), s=horizontal split (vertical pane))
# unbind %; unbind '"'; unbind p; unbind -n C-\\  # Unbind defaults and conflicts
bind v split-window -h -p 40 -c "#{pane_current_path}"  # Vertical split (right pane)
bind s split-window -v -p 40 -c "#{pane_current_path}"  # Horizontal split (bottom pane)

# Resizing (symbol-based, repeatable after prefix: mnemonic for directions)
bind -r - resize-pane -L 5  # Reduce width (left)
bind -r = resize-pane -R 5  # Increase width (right)
bind -r _ resize-pane -D 5  # Reduce height (down)
bind -r + resize-pane -U 5  # Increase height (up)

# Optional: Prefix-free resizing (hold Ctrl + arrows for quick tweaks; uncomment if desired)
# bind-key -n C-Left  resize-pane -L 5
# bind-key -n C-Right resize-pane -R 5
# bind-key -n C-Down  resize-pane -D 5
# bind-key -n C-Up    resize-pane -U 5

# ═══════════════════════════════════════════════════════════════════════════════
# COPY MODE KEYBINDINGS
# ───────────────────────────────────────────────────────────────────────────────
# Vi-style copy mode with system clipboard (via yank plugin + wl-copy for Wayland/Hyprland)
bind-key -T copy-mode-vi v send-keys -X begin-selection         # Start selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel  # Yank and cancel
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "wl-copy"  # Pipe to clipboard on Enter

# Mouse drag support (if mouse is on)
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "wl-copy"

# Optional: X11 fallback (uncomment if not on Wayland; requires xclip)
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Ctrl+Backspace as Ctrl+W
bind-key C-? send-keys C-w

# ═══════════════════════════════════════════════════════════════════════════════
# SESSION/WINDOW/PANE DISCOVERY
# ───────────────────────────────────────────────────────────────────────────────
# Search sessions with fzf (remapped to R to avoid split conflict)
unbind-key f
bind C-f display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session |\
    xargs tmux switch-client -t"

# Search windows in current session with fzf
bind f display-popup -E "\
    tmux list-windows -F '#{window_index} #{window_name}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-window |\
    cut -d ' ' -f 1 |\
    xargs tmux select-window -t"

# Optional: Search/jump to panes with fzf (uncomment if desired; requires fzf)
# bind C-p display-popup -E "\
#     tmux list-panes -s -F '#{pane_index} #{pane_current_command} (#{pane_current_path})' |\
#     sed '/^$/d' |\
#     fzf --reverse --header jump-to-pane |\
#     cut -d ' ' -f 1 |\
#     xargs tmux select-pane -t"

# ═══════════════════════════════════════════════════════════════════════════════
# APP/TOOL LAUNCHERS
# ───────────────────────────────────────────────────────────────────────────────
# Lazygit in new window (prefix + g)
bind -r g new-window -n lazygit -c "#{pane_current_path}" "lazygit"

# Optional: Lazydocker (prefix + d, tying to Hyprland Docker bind; uncomment if desired)
bind -r d new-window -n docker -c "#{pane_current_path}" "lazydocker"

# ═══════════════════════════════════════════════════════════════════════════════
# PLUGINS
# ───────────────────────────────────────────────────────────────────────────────
set -g @plugin 'tmux-plugins/tpm'                    # Plugin manager
set -g @plugin 'tmux-plugins/tmux-sensible'          # Sane defaults
set -g @plugin 'alexwforsythe/tmux-which-key'        # Key hints (like which-key in Vim)
set -g @plugin 'tmux-plugins/tmux-yank'              # Yank to clipboard
set -g @plugin 'tmux-plugins/tmux-resurrect'         # Save/restore sessions
set -g @plugin 'tmux-plugins/tmux-continuum'         # Auto-save/restore
set -g @plugin 'christoomey/vim-tmux-navigator'      # Vim pane navigation

# Resurrect/Continuum Settings
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'           # Optional: Neovim strategy (uncomment if using)
set -g @resurrect-processes '~nvim'                 # Optional: Save nvim processes
set -g @continuum-restore 'on'

# Yank Settings
set -g @yank_action 'copy-pipe'

# Initialize TMUX plugin manager (must be last!)
run '~/.tmux/plugins/tpm/tpm'
